name: Manual Release

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit SHA to build from'
        required: true
        type: string
      release_tag:
        description: 'Release tag (e.g., v1.2.4-CE)'
        required: true
        type: string
      release_title:
        description: 'Release title'
        required: true
        type: string
      release_description:
        description: 'Release description'
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        type: boolean
        default: false

env:
  BUILD_TYPE: Release
  GH_TOKEN: ${{ github.token }}

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  check_permissions:
    runs-on: ubuntu-latest
    outputs:
      can_release: ${{ steps.check.outputs.can_release }}
    steps:
    - name: Check if user has admin permissions
      id: check
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Check if the triggering user has admin or maintain permissions
        USER_PERMISSION=$(gh api repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission --jq '.permission')
        echo "User ${{ github.actor }} has permission: $USER_PERMISSION"
        
        if [[ "$USER_PERMISSION" == "admin" || "$USER_PERMISSION" == "maintain" ]]; then
          echo "can_release=true" >> $GITHUB_OUTPUT
          echo "✅ User has sufficient permissions to create releases"
        else
          echo "can_release=false" >> $GITHUB_OUTPUT
          echo "❌ User does not have admin/maintain permissions"
          exit 1
        fi

  build_windows:
    needs: check_permissions
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Checkout specific commit SHA
      run: git checkout ${{ inputs.commit_sha }}
    
    - name: Set version variables
      shell: bash
      run: |
        VERSION_STR="${{ inputs.release_tag }}"
        # Remove 'v' prefix if present
        VERSION_STR="${VERSION_STR#v}"
        echo "VERSION_STR=$VERSION_STR" >> $GITHUB_ENV
        echo "BUILD_VERSION=${{ inputs.release_tag }}" >> $GITHUB_ENV
        echo "Setting version to: $VERSION_STR"
        echo "Setting build version to: ${{ inputs.release_tag }}"
        
        # Update version.h
        sed -i "s/^#define VERSION_STR.*/#define VERSION_STR \"$VERSION_STR\"/" core/src/version.h
        
        # Update make_macos_bundle.sh
        sed -i "s/bundle_create_plist sdrppce \"SDR++CE Community Edition\" org.sdrppce.sdrppce [^ ]* sdrp/bundle_create_plist sdrppce \"SDR++CE Community Edition\" org.sdrppce.sdrppce $VERSION_STR sdrp/" make_macos_bundle.sh
    
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Download PothosSDR
      run: Invoke-WebRequest -Uri "https://downloads.myriadrf.org/builds/PothosSDR/PothosSDR-2020.01.26-vc14-x64.exe" -OutFile ${{runner.workspace}}/pothos.exe

    - name: Install PothosSDR
      run: mkdir "C:/Program Files/PothosSDR" ; 7z x ${{runner.workspace}}/pothos.exe -o"C:/Program Files/PothosSDR/"

    - name: Download libusb
      run: Invoke-WebRequest -Uri "https://github.com/libusb/libusb/releases/download/v1.0.23/libusb-1.0.23.7z" -OutFile ${{runner.workspace}}/libusb.7z

    - name: Patch Pothos with earlier libusb version
      working-directory: ${{runner.workspace}}
      run: 7z x libusb.7z -olibusb_old ; rm "C:/Program Files/PothosSDR/bin/libusb-1.0.dll" ; cp "libusb_old/MS64/dll/libusb-1.0.dll" "C:/Program Files/PothosSDR/bin/" ; rm "C:/Program Files/PothosSDR/lib/libusb-1.0.lib" ; cp "libusb_old/MS64/dll/libusb-1.0.lib" "C:/Program Files/PothosSDR/lib/"

    - name: Download librtlsdr
      run: Invoke-WebRequest -Uri "https://ftp.osmocom.org/binaries/windows/rtl-sdr/rtl-sdr-64bit-20240623.zip" -OutFile ${{runner.workspace}}/rtl-sdr.zip

    - name: Patch Pothos with newer librtlsdr version
      working-directory: ${{runner.workspace}}
      run: 7z x rtl-sdr.zip ; rm "C:/Program Files/PothosSDR/bin/rtlsdr.dll" ; cp "rtl-sdr-64bit-20240623/librtlsdr.dll" "C:/Program Files/PothosSDR/bin/rtlsdr.dll"

    - name: Download SDRPlay API
      run: Invoke-WebRequest -Uri "https://www.sdrpp.org/SDRplay.zip" -OutFile ${{runner.workspace}}/SDRplay.zip

    - name: Install SDRPlay API
      run: 7z x ${{runner.workspace}}/SDRplay.zip -o"C:/Program Files/"

    - name: Download codec2
      run: git clone https://github.com/drowe67/codec2

    - name: Prepare MinGW
      run: C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 -c "pacman --noconfirm -S --needed base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja"

    - name: Prepare build for codec2
      run: cd codec2 ; mkdir build ; cd build ; C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 -c "cmake .. -DCMAKE_GNUtoMS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS=-static-libgcc"

    - name: Build codec2
      run: cd codec2/build ; C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 -c "ninja"

    - name: Install codec2
      run: mkdir "C:/Program Files/codec2" ; mkdir "C:/Program Files/codec2/include" ; mkdir "C:/Program Files/codec2/include/codec2" ; mkdir "C:/Program Files/codec2/lib" ; cd "codec2" ; xcopy "src" "C:/Program Files/codec2/include" ; cd "build" ; xcopy "src" "C:/Program Files/codec2/lib" ; xcopy "codec2" "C:/Program Files/codec2/include/codec2"

    - name: Install vcpkg dependencies
      run: vcpkg install fftw3:x64-windows glfw3:x64-windows portaudio:x64-windows zstd:x64-windows libusb:x64-windows spdlog:x64-windows

    - name: Install rtaudio
      run: git clone https://github.com/thestk/rtaudio ; cd rtaudio ; git checkout 2f2fca4502d506abc50f6d4473b2836d24cfb1e3 ; mkdir build ; cd build ; cmake .. ; cmake --build . --config Release ; cmake --install .

    - name: Install libperseus-sdr
      run: git clone https://github.com/AlexandreRouma/libperseus-sdr ; cd libperseus-sdr ; mkdir build ; cd build ; cmake -DCMAKE_BUILD_TYPE=Release "-DLIBUSB_LIBRARIES=C:/Program Files/PothosSDR/lib/libusb-1.0.lib" "-DLIBUSB_INCLUDE_DIRS=C:/Program Files/PothosSDR/include/libusb-1.0" .. "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" ; cmake --build . --config Release  ; mkdir "C:/Program Files/PothosSDR/include/perseus-sdr" ; cp Release/perseus-sdr.dll "C:/Program Files/PothosSDR/bin" ; cp Release/perseus-sdr.lib "C:/Program Files/PothosSDR/bin" ; cd .. ; xcopy "src" "C:/Program Files/PothosSDR/include/perseus-sdr"

    - name: Install librfnm
      run: git clone https://github.com/AlexandreRouma/librfnm ; cd librfnm ; mkdir build ; cd build ; cmake .. -DCMAKE_BUILD_TYPE=Release "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" ; cmake --build . --config Release ; cmake --install .

    - name: Install libfobos
      run: git clone https://github.com/AlexandreRouma/libfobos ; cd libfobos ; mkdir build ; cd build ; cmake .. -DCMAKE_BUILD_TYPE=Release "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" ; cmake --build . --config Release ; cmake --install .

    - name: Prepare CMake
      working-directory: ${{runner.workspace}}/build
      run: cmake -DCOPY_MSVC_REDISTRIBUTABLES=ON "$Env:GITHUB_WORKSPACE" "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_PERSEUS_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_NEW_PORTAUDIO_SINK=ON -DOPT_BUILD_M17_DECODER=ON -DOPT_BUILD_RFNM_SOURCE=ON -DOPT_BUILD_FOBOSSDR_SOURCE=ON
      env:
        BUILD_VERSION: ${{ env.VERSION_STR }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config Release --verbose

    - name: Create Windows Package  
      working-directory: ${{runner.workspace}}
      run: '&("${{github.workspace}}" + "/make_windows_package.ps1") ./build ("${{github.workspace}}" + "/root")'

    - name: Run Build Quality Tests
      working-directory: ${{github.workspace}}
      run: powershell -ExecutionPolicy Bypass -File ./ci_tests/test_windows_build.ps1 -BuildDir "${{runner.workspace}}/build" -PackageDir "${{runner.workspace}}/sdrpp_windows_x64"

    - name: Create Archive
      working-directory: ${{runner.workspace}}
      run: 7z a sdrpp_windows_x64.zip sdrpp_windows_x64/*
      
    - name: Verify version is embedded (Windows)
      shell: bash
      run: |
        strings ${{runner.workspace}}/sdrpp_windows_x64/sdrpp_ce.exe | grep -F "$BUILD_VERSION" || echo "WARNING: Version string not found in binary"

    - name: Save Archive
      uses: actions/upload-artifact@v4
      with:
          name: sdrpp_windows_x64
          path: ${{runner.workspace}}/sdrpp_windows_x64.zip



  create_full_archive:
    needs: [
      'build_android'
    ]
    runs-on: ubuntu-latest

    steps:
    - name: Download All Builds
      uses: actions/download-artifact@v4

    - name: Create Archive
      run: >
        mkdir sdrpp_all && 
        mv sdrpp_windows_x64/sdrpp_windows_x64.zip sdrpp_all/ && 
        mv sdrpp_android/sdrpp.apk sdrpp_all/sdrpp.apk

  
    - uses: actions/upload-artifact@v4
      with:
        name: sdrpp_all
        path: sdrpp_all/*

  create_release:
    needs: create_full_archive
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout for tagging
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Point origin to tokened URL
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"

    - name: Create and push release tag
      env:
        GH_TOKEN: ${{ github.token }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        set -euo pipefail
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git tag -a "${{ inputs.release_tag }}" "${{ inputs.commit_sha }}" -m "Release ${{ inputs.release_tag }}"
        git push origin "refs/tags/${{ inputs.release_tag }}"

    - name: Download consolidated artifact
      uses: actions/download-artifact@v4
      with:
        name: sdrpp_all
        path: sdrpp_all

    - name: Get full commit SHA
      id: get_sha
      run: |
        FULL_SHA=$(git rev-parse ${{ inputs.commit_sha }})
        echo "full_sha=$FULL_SHA" >> $GITHUB_OUTPUT
        echo "Full SHA: $FULL_SHA"

    - name: Create GitHub release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Create the release
        if [ "${{ inputs.prerelease }}" = "true" ]; then
          gh release create "${{ inputs.release_tag }}" \
            --title "${{ inputs.release_title }}" \
            --notes "${{ inputs.release_description }}" \
            --target "${{ steps.get_sha.outputs.full_sha }}" \
            --prerelease \
            sdrpp_all/*
        else
          gh release create "${{ inputs.release_tag }}" \
            --title "${{ inputs.release_title }}" \
            --notes "${{ inputs.release_description }}" \
            --target "${{ steps.get_sha.outputs.full_sha }}" \
            sdrpp_all/*
        fi
