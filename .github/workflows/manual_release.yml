name: Manual Release

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit SHA to build from'
        required: true
        type: string
      release_tag:
        description: 'Release tag (e.g., v1.2.4-CE)'
        required: true
        type: string
      release_title:
        description: 'Release title'
        required: true
        type: string
      release_description:
        description: 'Release description'
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        type: boolean
        default: false

env:
  BUILD_TYPE: Release
  GH_TOKEN: ${{ github.token }}

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  check_permissions:
    runs-on: ubuntu-latest
    outputs:
      can_release: ${{ steps.check.outputs.can_release }}
    steps:
    - name: Check if user has admin permissions
      id: check
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Check if the triggering user has admin or maintain permissions
        USER_PERMISSION=$(gh api repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission --jq '.permission')
        echo "User ${{ github.actor }} has permission: $USER_PERMISSION"
        
        if [[ "$USER_PERMISSION" == "admin" || "$USER_PERMISSION" == "maintain" ]]; then
          echo "can_release=true" >> $GITHUB_OUTPUT
          echo "✅ User has sufficient permissions to create releases"
        else
          echo "can_release=false" >> $GITHUB_OUTPUT
          echo "❌ User does not have admin/maintain permissions"
          exit 1
        fi

  build_android:
    needs: check_permissions
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Checkout specific commit SHA
      run: git checkout ${{ inputs.commit_sha }}
    
    - name: Update Version Information
      run: |
        VERSION_STR="${{ inputs.release_tag }}"
        # Remove 'v' prefix if present
        VERSION_STR="${VERSION_STR#v}"
        echo "VERSION_STR=$VERSION_STR" >> $GITHUB_ENV
        echo "Setting version to: $VERSION_STR"
        
        # Update version.h
        sed -i "s/^#define VERSION_STR.*/#define VERSION_STR \"$VERSION_STR\"/" core/src/version.h
        
        # Update make_macos_bundle.sh
        sed -i "s/bundle_create_plist sdrppce \"SDR++CE Community Edition\" org.sdrppce.sdrppce [^ ]* sdrp/bundle_create_plist sdrppce \"SDR++CE Community Edition\" org.sdrppce.sdrppce $VERSION_STR sdrp/" make_macos_bundle.sh
        
        # Update Android version
        sed -i "s/versionName \".*\"/versionName \"$VERSION_STR\"/" android/app/build.gradle

    - name: Fetch container
      working-directory: ${{runner.workspace}}
      run: git clone https://github.com/AlexandreRouma/android-sdr-kit
    
    - name: Build container
      working-directory: ${{runner.workspace}}/android-sdr-kit
      run: docker build --progress=plain -t android-sdr-kit .

    - name: Build
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus android-sdr-kit /bin/bash -l -c "cd /root/SDRPlusPlus/android && gradle --info assembleDebug"

    - name: Recover APK
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/android/app/build/outputs/apk/debug/app-debug.apk ./ && mv app-debug.apk sdrpp.apk

    - name: Save APK
      uses: actions/upload-artifact@v4
      with:
          name: sdrpp_android
          path: ${{runner.workspace}}/sdrpp.apk

  create_full_archive:
    needs: [
      'build_android'
    ]
    runs-on: ubuntu-latest

    steps:
    - name: Download All Builds
      uses: actions/download-artifact@v4

    - name: Create Archive
      run: >
        mkdir sdrpp_all && 
        mv sdrpp_android/sdrpp.apk sdrpp_all/sdrpp.apk

  
    - uses: actions/upload-artifact@v4
      with:
        name: sdrpp_all
        path: sdrpp_all/*

  create_release:
    needs: create_full_archive
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout for tagging
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Point origin to tokened URL
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"

    - name: Create and push release tag
      env:
        GH_TOKEN: ${{ github.token }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        set -euo pipefail
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git tag -a "${{ inputs.release_tag }}" "${{ inputs.commit_sha }}" -m "Release ${{ inputs.release_tag }}"
        git push origin "refs/tags/${{ inputs.release_tag }}"

    - name: Download consolidated artifact
      uses: actions/download-artifact@v4
      with:
        name: sdrpp_all
        path: sdrpp_all

    - name: Get full commit SHA
      id: get_sha
      run: |
        FULL_SHA=$(git rev-parse ${{ inputs.commit_sha }})
        echo "full_sha=$FULL_SHA" >> $GITHUB_OUTPUT
        echo "Full SHA: $FULL_SHA"

    - name: Create GitHub release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Create the release
        if [ "${{ inputs.prerelease }}" = "true" ]; then
          gh release create "${{ inputs.release_tag }}" \
            --title "${{ inputs.release_title }}" \
            --notes "${{ inputs.release_description }}" \
            --target "${{ steps.get_sha.outputs.full_sha }}" \
            --prerelease \
            sdrpp_all/*
        else
          gh release create "${{ inputs.release_tag }}" \
            --title "${{ inputs.release_title }}" \
            --notes "${{ inputs.release_description }}" \
            --target "${{ steps.get_sha.outputs.full_sha }}" \
            sdrpp_all/*
        fi
